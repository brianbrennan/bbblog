{
	"a_problem_with_svgs_and_how_to_avoid_it": {
		"content": "<h1 id=\"a-problem-with-svgs-and-how-to-avoid-it\">A Problem with SVGs and How to Avoid it</h1>\n<p>I found an in­ter­est­ing bug while try­ing to ﬁnd an easy to use <span class=\"small-caps\">SVG</span> so­lu­tion al­ter­na­tives at work. I’d like to take you on the trip I went on while try­ing to solve a prob­lem, in or­der to get the full scope of this su­per niche is­sue.</p>\n<h2 id=\"svg-and-how-it-shouldn-t-be-implemented\"><span class=\"small-caps\">SVG</span> and how it <em>should­n’t</em> be im­ple­mented</h2>\n<p>Scalable Vector Graphics (SVGs) are an awe­some bit of tech­nol­ogy that al­lows you to use vec­tor ﬁles in your <span class=\"small-caps\">HTML</span> and <span class=\"small-caps\">CSS</span>, in­stead of raster im­ages. This gives you the ﬂex­i­bil­ity of be­ing able to re­size el­e­ments us­ing SVGs with­out hav­ing to worry about them look­ing pix­e­lated. However they are no­to­ri­ously an­noy­ing to work with. Not <em>dif­ﬁ­cult</em> to work with, just… an­noy­ing! There’s a litany of ref­er­ences as far as how SVGs should be im­ple­mented on front end de­vel­op­ment blogs across the web, and yet they are rarely con­sis­tent. This is mainly sur­pris­ing be­cause SVGs have been around for sev­eral years now. I re­mem­ber im­ple­ment­ing them as early as 2013, and I’m sure that their ac­tual tech spec dates back much far­ther than that.</p>\n<p>One of the ﬁrst widely im­ple­mented way to use SVGs was demon­strated by famed de­vel­oper <a href=\"https://twitter.com/chriscoyier\">Chris Coyier</a> on <a href=\"https://css-tricks.com/using-svg/\">CSSTricks</a>. This ar­ti­cle is still on the ﬁrst page of google re­sults when search­ing for<span class=\"push-double\"></span> <span class=\"pull-double\">“</span><span class=\"small-caps\">SVG</span><span class=\"push-double\"></span><span class=\"pull-double\">”</span>, and un­der­stand­ably so. Now, I’m not go­ing to say any­thing bad about Chris, he’s ob­vi­ously a huge ﬁg­ure in the front end de­vel­oper com­mu­nity. But this ar­ti­cle has prob­a­bly led to some of the worst im­ple­men­ta­tions of <span class=\"small-caps\">SVG</span> that ex­ist on the web. In this ar­ti­cle he states that a good so­lu­tion for SVGs as back­ground im­ages is to en­code them in BASE-64 and then put them in your <span class=\"small-caps\">CSS</span>. There’s a huge prob­lem with this though. Well… sev­eral ac­tu­ally. The ﬁrst is that the very pur­pose of en­cod­ing things as BASE-64 is to save on per­for­mance. Your BASE-64 should be smaller than the orig­i­nal ﬁle. This can of­ten not be the case. The sec­ond is­sue is that it causes your <span class=\"small-caps\">CSS</span> to look like crap. Having a big block of ro­botic moon-speak in the mid­dle of your stylesheet is ex­tremely un­set­tling, in con­trast to the clean code I’m sure every­one has writ­ten around it. The last and se­cretly most in­sid­i­ous is­sue, arises when you start us­ing this tech­nique with a pre­proces­sor like <span class=\"small-caps\">LESS</span> or <span class=\"small-caps\">SASS</span>.</p>\n<p>Let’s say you want to start us­ing SVGs, in your nifty new pre­proces­sor lan­guage that you’ve started to use, but maybe haven’t got­ten a full grasp on how ei­ther work yet. So you stum­ble upon this afore­men­tioned ar­ti­cle, and de­cide to put that an­droid-bab­ble into a vari­able in your stylesheet. Maybe, be­cause you’re a bit more ad­vanced, you want to put it in a mixin. Let’s say that this is for a com­monly used icon, and you pro­ceed to ref­er­ence that vari­able or mixin all over the place, and your code looks much cleaner than if you were to try and put a big block of garbage all over the place. And you smile at how clean your code looks, com­pile your stylesheet, and give your­self a pat on the back for how good of a job you’ve done.</p>\n<p>Except, that block of garbage can’t get<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>referenced” in your com­piled <span class=\"small-caps\">CSS</span> now, it needs to be put in every place you want that <span class=\"small-caps\">SVG</span> to show up. Every… sin­gle… place. If you do ex­actly what I just men­tioned, there’s no shame in it. It’s a to­tally un­der­stand­able mis­take, but yeah you might want to ﬁx that. If you make this mis­take, your un­wit­tingly get­ting rid of one of the best ben­e­ﬁts of <span class=\"small-caps\">SVG</span>: per­for­mance. Instead, you’re clog­ging up your style re­quest with all of this BASE-64 non­sense.</p>\n<h2 id=\"how-svgs-should-be-implemented\">How SVGs <em>should</em> be im­ple­mented</h2>\n<p>Now, this is one par­tic­u­lar bad way to im­ple­ment this, but how can we ﬁx it, and what are some other so­lu­tions? SVGs are very ﬂex­i­ble in the way of how they can be im­ple­mented, and like I’ve said, there is lit­tle con­sis­tency on which way is best. In my mind, there are two ways that an <span class=\"small-caps\">SVG</span> can and should be im­ple­mented, and they both have their ben­e­ﬁt. The ﬁrst is to use them in­line. SVGs can be in­jected di­rectly into your markup. This al­lows you the added ben­e­ﬁt of be­ing able to dy­nam­icly ma­nip­u­late them. Once an <span class=\"small-caps\">SVG</span> is in­line, you can think of it as be­ing drawn when the page is be­ing painted by the browser, but it can be up­dated via <span class=\"small-caps\">CSS</span> as well. A sim­ple ex­am­ple of this hav­ing an icon, that once hov­ered over, will change the ﬁll color from blue to red.</p>\n<pre><code class=\"lang-HTML\">&lt;!-- in your HTML --&gt;\n    &lt;svg&gt;\n        &lt;path&gt;&lt;/path&gt; &lt;!-- part of your svg icon --&gt;\n        .\n        .\n        .\n    &lt;/svg&gt;\n</code></pre>\n<pre><code class=\"lang-SASS\">     //In your Stylesheet (sass in this example)\n    svg {\n        path {\n            fill: blue;\n        }\n\n        &amp;: hover {\n            path {\n                fill: red;\n            }\n        }\n    }\n</code></pre>\n",
		"meta": {
			"creationDate": "2017-12-08T23:03:23.631Z",
			"lastEdited": "2017-11-30T17:42:13.508Z",
			"tags": [
				"SVG"
			],
			"title": "A Problem with SVGs and How to Avoid It"
		}
	},
	"bang_bang_youre_boolean": {
		"content": "<h1 id=\"boolean-evalulation-in-non-strictly-typed-javascript\">Boolean eval­u­la­tion in non-strictly typed JavaScript</h1>\n<p>JavaScript typ­ing is a topic of de­bate that is cur­rently rag­ing in the world of frame­works. How should things be typed in JS? Should it mimic strongly typed lan­guages? Or should some of the weird­ness of <span class=\"small-caps\">JS</span> be em­braced and ex­panded upon with its own syn­tac­tic sugar. Well, the jury is still out on that one, but its easy to see for our lit­tle run­time-lan­guage-that-could has a fu­ture in­volv­ing a much stricter rule-set. But if you don’t feel like pick­ing up some­thing like TypeScript or <span class=\"small-caps\">ES6</span>, then there’s some cool nu­ances that are good to have in your back pocket.</p>\n<h2 id=\"you-re-just-not-my-type\">You’re just not my type</h2>\n<p>Boolean typ­ing in <span class=\"small-caps\">JS</span> is a bit weird. And it mainly has to do with how val­ues are read in and sub­se­quently eval­u­ated. If you don’t know what truthy and falsey val­ues in <span class=\"small-caps\">JS</span> are, they’re ba­si­cally val­ues that are get­ting eval­u­ated to a boolean with­out ac­tu­ally chang­ing the value of the operand. The fol­low­ing val­ues are falsey:</p>\n<ul>\n<li><code>false</code>,</li>\n<li><code>0</code> (zero),</li>\n<li><code>&#39;&#39;</code> (empty string),</li>\n<li><code>null</code>,</li>\n<li><code>undefined</code>,</li>\n<li><code>NaN</code></li>\n</ul>\n<p>And here’s the val­ues that are truthy</p>\n<ul>\n<li><em>Literally every­thing else</em></li>\n</ul>\n<p>Seems fairly sim­ple right? If some­thing is<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>bad” or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>doesn’t ex­ist”, it’s <code>false</code>. Something that is<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>good” or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>does ex­ist” is <code>true</code>. Simple! Well, not quite. Boolean val­ues in <span class=\"small-caps\">JS</span> have some weird nu­ances in­volv­ing de­c­la­ra­tion state­ments and im­ple­men­ta­tions. Here’s a list of some of the an­noy­ing ones and how to deal with them.</p>\n<h2 id=\"-1-is-true-even-in-0-indexed-arrays\">-1 is true, even in 0 in­dexed ar­rays</h2>\n<p>This one is a per­sonal pet peeve. I know that there is prob­a­bly a deeply in­grained rea­son for this, but it does­n’t make it any less an­noy­ing. As you can see from the list above of falsey val­ues, the only nu­mer­i­cal one is <code>0</code> (okay tech­ni­cally <code>NaN</code> is as well but shush). If you have some sort of equa­tion or out­put that equals <code>0</code>, then it is con­sid­ered <code>false</code>. This can be­come prob­lem­atic when deal­ing with po­si­tion­ing within ar­rays. When you want to ﬁnd the <code>indexOf</code> an item in an ar­ray, the re­turned value is <code>-1</code> if the item does­n’t ex­ist in the ar­ray. Remember how I said that things that are<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>bad” or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>don’t ex­ist” are falsey? Whelp, not in this case. If you try to search for the let­ter <code>&quot;k&quot;</code> in the word <code>&quot;fabric&quot;</code>, and try to eval­u­ate the boolean na­ture of that state­ment, it will come out as true. But there’s more. If you try to ﬁnd the po­si­tion of <code>&quot;f&quot;</code> in the word <code>&quot;fabric&quot;</code>, you will get the cor­rect po­si­tion of <code>0</code>, the ﬁrst item in a zero-in­dexed ar­ray, and that state­ment eval­u­ates as false. Again, I’m sure there’s a rea­son that the gods of pro­gram­ming de­cided to keep this the way it is, but would­n’t it be much eas­ier if you could just just say</p>\n<pre><code class=\"lang-javascript\">if(array.indexOf(1)) {\n    //some statement based on truthiness\n} else {\n   //some statement based on falsiness\n}\n</code></pre>\n<h2 id=\"nan-does-not-equal-itself\">NaN does not equal it­self</h2>\n<p>A fea­ture of most boolean val­ues is that they have a prop­erty of iden­tity. If you were to com­pare most val­ues to it­self within a boolean op­er­a­tion, you’d get <code>true</code>. Want to see if some­thing eval­u­ates to <code>true</code>? Just com­pare it to <code>true</code>. Trying to check if a prop­erty is <code>undefined</code>? Just write <code>property === undefined</code>. There is a no­table ex­cep­tion to this rule, and its name is <code>NaN</code>. Not-a-Number is a spe­cial Numerical value that is some­what rarer than other prob­lem chil­dren like <code>undefined</code> and <code>null</code>, but that does­n’t mean it is­n’t tricky to eval­u­ate via <code>boolean</code>. Lets say you wanted to do and er­ror check for a spe­ciﬁc in­put that a user has given you. Lets say that by the most per­fect storm of ter­ri­ble in­putting, they get a value of <code>NaN</code>. How do you check for that? Well surely you should be able to just write <code>inputValue === NaN</code>, right? Wrong. <code>NaN === NaN</code> eval­u­ates to <code>false</code>. It does­n’t equal it­self. Now, again, I know there’s a per­fectly good rea­son as to why this is the case, and re­ly­ing on <code>NaN</code> for er­ror check­ing is pretty ter­ri­ble pro­gram­ming, but nonethe­less, hav­ing weird­ness with fun­da­men­tal val­ues can cer­tainly lead to some hair pulling if you aren’t care­ful.</p>\n<h2 id=\"bang-bang-you-re-a-boolean\">Bang Bang, you’re a boolean</h2>\n<p>This nu­ance is prob­a­bly my fa­vorite, and its re­ally just be­cause I read the best com­ment about it when I was try­ing to ﬁg­ure it out. JavaScript not be­ing strongly typed can def­i­nitely lead to com­edy. Lets say you have a value, and you want to re­turn its truthi­ness or falsi­ness. But what if you’re us­ing some sort of lint­ing pro­gram that pre­vents non-strict com­par­isons? And what if you don’t want to re­turn <code>true</code> if the value is <code>undefined</code>, but <code>false</code> if its <code>null</code>. Well, there’s a slightly ob­scured, amaz­ing way to say<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>no, this is a true blue boolean, not some of that pseudo boolean eval­u­a­tion stuff”.</p>\n<pre><code class=\"lang-javascript\">!!(x)\n</code></pre>\n<p>A <code>!</code> char­ac­ter in boolean con­text ba­si­cally means<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>take what­ev­ers af­ter this and make it op­po­site”. The dou­ble-bang op­er­a­tor can quickly be de­scribed as <span class=\"small-caps\">NOT</span> <span class=\"small-caps\">NOT</span>. As well all know from 3rd grade eng­lish class, dou­ble neg­a­tives aren’t the best way to write things, but they do get the job done in this case.</p>\n<p>This ex­pres­sion will re­turn true, or false de­pend­ing on the value of <code>x</code>. I’m go­ing to have to give credit to Gus on stack over­ﬂow for com­ing up with the best jin­gle for this. <a href=\"http://stackoverflow.com/questions/784929/what-is-the-not-not-operator-in-javascript\">http://​stack­over­ﬂow.com/​ques­tions/​784929/​what-is-the-not-not-op­er­a­tor-in-javascript</a>.<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Bang Bang, you’re boolean”. It works bests if you point ﬁn­ger-guns at your screen and make guns noises while run­ning your code by the way.</p>\n",
		"meta": {
			"creationDate": "2017-12-08T23:03:23.606Z",
			"lastEdited": "2017-11-27T22:13:10.757Z",
			"tags": [
				"Javascript",
				"js",
				"es2015"
			],
			"title": "Bang Bang, You're Boolean"
		}
	},
	"online_education_comparison": {
		"content": "<h1 id=\"online-education-comparison\">Online Education Comparison</h1>\n<p>I think that every web de­vel­oper should be sub­scribed to some kind of on­line ed­u­ca­tion site, so that they can reg­u­larly hone their skills and keep up to date on all the newest tech­nolo­gies out there. And while some­thing can be said for learn­ing on your own, through shot­gunned google searches (since let’s be hon­est, that’s our un­writ­ten job de­scrip­tion), I feel hav­ing more struc­tured tools to learn­ing about de­vel­op­ment is es­sen­tial. Even those who claim to have mas­tered their work­ﬂow (because they’ve got­ten very good at ﬁnd­ing ex­actly what to google) still know that their work­ﬂow can change on a dime. New tech­nolo­gies come out every month, and while most are a ﬂash in the pan, oth­ers stick around. With new tech­nolo­gies comes a lot of learn­ing to do. There is no shame in hav­ing a help­ing hand as far as learn­ing the ropes on any­thing new. Every de­vel­oper should feel com­fort­able enough with feel­ing un­com­fort­able with new tech­nol­ogy. They should be able to learn new tools quickly, and on­line ed­u­ca­tion plat­forms are a great tool for do­ing just that. I feel that video tu­to­ri­als are by far the best way to learn and keep up with new en­tries in the grand cat­a­log of de­vel­op­ment tools. So with all that be­ing said, which ed­u­ca­tion plat­form should we use?</p>\n<p>I’m go­ing to give two an­swers to that ques­tion. The ﬁrst is Treehouse. The sec­ond is Lynda. These two on­line ed­u­ca­tion sites have ex­ten­sive li­braries for de­vel­op­ment, are not par­tic­u­larly ex­pen­sive, and are over­all are just fan­tas­tic for learn­ing on your own. But these two tools are vastly dif­fer­ent from each other, and while they are both my fa­vorites, they do not nec­es­sar­ily fall into the same lev­els of ex­pe­ri­ence. So let’s start with Treehouse.</p>\n<p>Treehouse is a site made specif­i­cally with web de­vel­op­ment and de­sign in mine. It’s courses are tai­lored to­wards its users want­ing to learn more about how the web works, and how they can add their own pieces to this ﬁeld. It’s courses are com­bi­na­tions of videos, quizzes, and ex­er­cises, al­ter­nat­ing reg­u­larly within each course. This gives the user a great ex­pe­ri­ence of hear­ing what is be­ing said, and then im­me­di­ately putting it to prac­tice, rather than just tak­ing notes lec­ture-style. Their li­brary has a vast ar­ray of dif­fer­ent lan­guages, in­clud­ing most tools a web de­vel­oper might need. Treehouse also in­cludes a great tool called<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Tracks”. These are a col­lec­tion of courses that a stu­dent would need to take in or­der to achieve a cer­tain goal. For ex­am­ple, they have a<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Front End Development Track”, which goes through the ba­sics of <span class=\"small-caps\">HTML</span> and <span class=\"small-caps\">CSS</span>, all the way to be­ing able to cre­ate a cus­tom WordPress theme. And while the track is ob­vi­ously not ex­haus­tive (I don’t think in to­day’s world that just a few courses can make you into a pro­fes­sional de­vel­oper), it’s a way to show peo­ple who know lit­tle or noth­ing the right di­rec­tion to move in or­der to be­come pro­ﬁ­cient.</p>\n<p>In ad­di­tion to this won­der­ful col­lec­tion of courses, Treehouse has a so­cial as­pect to it. Each user gets badges and points when they com­plete some course­work. This seems like some­thing small but I do have to say that I have stuck around for an ex­tra hour once in a while just to see my points go up a lit­tle. These badges also give you a break­down of what per­cent­ages you’ve ap­plied in your learn­ing to what lan­guages. Your lit­tle<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>pizza pie” of col­ors is a quick vi­sual to see what lan­guages you’ve learned so far. Treehouse also has a fo­rum where you can post ques­tions re­lat­ing to course­work, which are of­ten an­swered by other stu­dents or Treehouse mod­er­a­tors. I’ve found that any ques­tion I’ve had of­ten had been asked be­fore, and that the an­swer is just a click away from any video.</p>\n<p>This is not a com­pre­hen­sive list of Treehouse’s fea­tures, but I will say that I was im­pressed by this ed­u­ca­tion plat­form that I stum­bled across about a year ago through a ban­ner ad. However Treehouse does have some short­com­ings. These may be things to con­sider be­fore pick­ing up a sub­scrip­tion.</p>\n<p>Treehouse has a very child-like de­sign phi­los­o­phy be­hind it. From the way that the site is de­signed to the courses them­selves, I could­n’t help feel­ing like a kid again, and not re­ally in a great way. It seems like<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Nick Jr.” for Web Developers at times. The way that the site is laid out with ﬂat de­sign is one thing, but the pre­sen­ta­tion by Treehouse in­struc­tors is quite an­other. I’ll just say it: the act­ing and scripts for Treehouse are pretty bad. While I’m sure/ I know that the in­struc­tors know a ton about the course­work they are show­cas­ing, the way in which they talk about it makes me feel like I’m be­ing pa­tron­ized. It’s not a very pro­fes­sional way to show web de­vel­op­ment. Even some of the ex­am­ples that the user gets to build-along with in­struc­tor are child-like. While the de­vel­op­ment prin­ci­ple of an ecom­merce so­lu­tion with <span class=\"small-caps\">PHP</span> is im­por­tant, do I re­ally need to build a t-shirt site for a talk­ing frog to prove it? It seems like a small thing, but when you’ve spent a lot of time watch­ing their videos, it def­i­nitely can be­come an­noy­ing.</p>\n<p>Another down­fall of Treehouse is that their li­brary is lack­ing in some of the cut­ting edge ar­eas. There have been a fair num­ber of times that I’ve looked up a cer­tain tool, like Angular, or MongoDB, only to ﬁnd that they of­fer few or even no courses on the sub­ject. Other times I’ve looked up tech­nolo­gies, like Laravel, I’ve been met with a course that is grossly out of date, be­ing a whole it­er­a­tion be­hind the cur­rent ver­sion. I’d say that these oc­ca­sions are few and far be­tween, but def­i­nitely be­come more ap­par­ent when you be­come a more ad­vanced de­vel­oper. So if you’re a be­gin­ner to a base lan­guage, it’s great. Otherwise, you might ﬁnd that Treehouse is not for you.</p>\n<p>This is not to say that Treehouse is bad. As I said, it’s one of my fa­vorites. But I did re­cently pause my ac­count, sim­ply be­cause I felt I learned all I could/ wanted to from their cur­rent li­brary of courses (but it did take a very long time). But let’s move on to Lynda, and see what they of­fer.</p>\n<p>Lynda.com is also an on­line ed­u­ca­tion plat­form, but in­stead of be­ing based solely on de­vel­op­ers, they of­fer courses across, well, every­thing you could hope to learn on a com­puter. It’s pretty much the heavy hit­ter when it comes to learn­ing any­thing on­line these days. If you haven’t heard of it I’d be sur­prised.  So if you’re like me and have a few dif­fer­ent hob­bies based around com­put­ers, you can ab­solutely get a lot of mileage out of Lynda. Their pre­sen­ta­tion is con­cise and pro­fes­sional. Their list of videos in a given course are laid out con­clu­sively so that a user can see each step they will take in learn­ing. They also show how long each and every video is, which makes it much eas­ier to watch if you’re on a bud­geted time.</p>\n<p>I’ve found that that their in­struc­tors can be hit or miss. Some might just have a voice that is­n’t that fun to lis­ten to for ex­tended pe­ri­ods of time. For ex­am­ple, a lot of their JavaScript courses are taught by Ray Villalobos. And while Ray is def­i­nitely tal­ented and has taught me a lot, a ra­dio voice he has not.</p>\n<p>While Treehouse’s cat­a­log seems to pe­ter out once the more ad­vanced top­ics are searched, Lynda seems to not have that prob­lem. I haven’t had an is­sue yet with ﬁnd­ing some­thing I was look­ing for. Their courses don’t have an as­pect of in­ter­ac­tiv­ity to them, with ex­er­cise ﬁles to fol­low along only given to pro mem­bers. And while that might seem like a bad thing, it is­n’t all the time. I’ve been able to kick back on the couch and watch some how-to’s with­out be­ing wor­ried about hav­ing to fol­low along. Sometimes it’s good to just get a straight lec­ture. Sometimes it’s not. It sort of de­pends on how you want to learn. But the op­tion for get­ting the ex­er­cise ﬁles only as a pro mem­ber is an­noy­ing. Most of the time you can fol­low along just ﬁne, but it gets rid of an ex­tra layer of struc­ture to the con­tent that oth­ers might like.</p>\n<p>There also is­n’t as much of a level of con­nec­tiv­ity be­tween courses. You have to know what you want to learn in or­der to progress. If you learn <span class=\"small-caps\">JSON</span>, then you’ll need to know that you should learn <span class=\"small-caps\">AJAX</span> next. It’s hard to beat their cat­a­log but some­times it’s hard to ﬁg­ure out what you should watch next</p>\n<p>Overall, I’d say Lynda is a to­tally solid al­ter­na­tive to Treehouse for de­vel­op­ers, if you feel too ad­vanced for Treehouse’s li­brary. That is cur­rently the place I’m in right now, and it’s def­i­nitely work­ing for me.</p>\n<p>To ﬁn­ish up, I’d like to say that I’m sure that there are other learn­ing tools out there that are great, and it’s much more im­por­tant to ﬁnd some­thing that works for you, rather than just lis­ten­ing to what some­one else says on­line. But as some­one who usu­ally has to google prob­lems I can’t solve, it’s nice to have a more struc­tured for­mat for learn­ing and brush­ing up on de­vel­op­ment. To me, that is in­dis­pens­able.</p>\n",
		"meta": {
			"creationDate": "2017-12-08T23:03:23.612Z",
			"lastEdited": "2017-12-07T21:43:04.795Z",
			"title": "Online Education Comparison",
			"tags": [
				"professional development",
				"learning web development"
			]
		}
	},
	"prototype_speed_test": {
		"content": "<h1 id=\"a-look-into-the-speed-of-prototypes-vs-closures\">A Look into The Speed of Prototypes vs. Closures</h1>\n<p>Prototype vs clo­sure is an ex­tremely in­ter­est­ing look at Object Oriented Javascript. I’d de­scribe my­self as an in­ter­me­di­ate level javascript de­vel­oper, and have been try­ing to learn as much as I can with this lovely lan­guage. I quickly found my­self want­ing to use Object Oriented Programming as ef­ﬁ­ciently as pos­si­ble for my web sites. Though for small sites, the im­pact of us­ing ex­tremely <span class=\"small-caps\">DRY</span> and ab­stracted code is prob­a­bly mar­ginal, for larger ap­pli­ca­tions its plain to see that hav­ing your code not be repet­i­tive is a saver of time, amongst other things like band­width us­age, mem­ory us­age, and all the other good­ies that should be op­ti­mized. While brush­ing up on my <span class=\"small-caps\">OOP</span> and ap­ply­ing it to JavaScript, I ran ac­cross the in­ter­est­ing dif­fer­ence in in­stan­ti­at­ing ob­jects in <span class=\"small-caps\">JS</span>: Prototypes. I’m sure many of the de­vel­oper read­ing this are think­ing what a noob I must be for just learn­ing this con­cept, but hey, I’ve never needed it be­fore. So I wanted to learn why it was such a big deal. What was the dif­fer­ence be­tween pro­to­types and clo­sures in <span class=\"small-caps\">JS</span> as far as speed, mem­ory us­age, and other im­por­tant fac­tors. As it turns out, this is a very com­monly asked ques­tion on StackOverﬂow, but I wanted to see for my­self what the big hubub was about. So I de­cided to con­coct a test be­tween these two ap­proaches to cre­at­ing ob­jects.<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>A sim­ple test on a large scale should do the trick”, I thought. So I very quickly jot­ted down a sketch of a dice rolling script that would take a lot of dice ob­jects, put them into an ar­ray, and see the dif­fer­ences be­tween the two. First up, is cre­at­ing the dice ob­jects in both their ﬂa­vors.</p>\n<h2 id=\"writing-the-code\">Writing the Code</h2>\n<p>First up, a Die with­out pro­to­typ­ing.</p>\n<pre><code class=\"lang-javascript\">//without prototype\nfunction Die(sides){\n    this.sides =  sides;\n    this.roll = function(){\n        return Math.floor(Math.random() * 6) + 1;\n    }\n}\n</code></pre>\n<p>As it stands here, when­ever a new in­stance of Die is cre­ated, the roll method will be com­pletely recre­ated within ob­ject. This cre­ates a lot of mem­ory us­age that can be avoided if pro­to­typ­ing was added. So next up, a Die with pro­to­typ­ing.</p>\n<pre><code class=\"lang-javascript\">//with prototype\nfunction ProtoDie(sides){\n    this.sides = sides;\n}\n\nProtoDie.prototype.roll = function(){\n    return Math.floor(Math.random() * 6) + 1;\n}\n</code></pre>\n<p>If you’re like me and learned a dif­fer­ent pro­gram­ming lan­guage be­fore JavaScript, this might seem a bit odd. This ProtoDie is in two sep­a­rate parts. Doesn’t that de­feat the pur­pose of en­cap­su­la­tion? The an­swer is, not at all. While hav­ing cus­tom func­tions ﬂoat­ing sep­a­rate to your ob­jects would ab­solutely be bad prac­tice, the use of pro­to­type here is not that. Instead, it is a sin­gle in­stance of the method listed, in this case<span class=\"push-single\"></span> <span class=\"pull-single\">‘</span>roll’, across all of the dif­fer­ent ProtoDie ob­jects. Now you might be think­ing,<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>what’s the big deal about that”? Let’s keep build­ing this sim­ple pro­gram and ﬁnd out. The ﬁrst thing I tried test­ing was the speed of in­stan­ti­a­tion across mul­ti­ple (and I mean mul­ti­ple) ob­jects.</p>\n<pre><code class=\"lang-javascript\">var dice = [];\n\nvar protoDice = [];\n\n\n//make 100 instances of each object\nfor(var i = 0; i &lt; 100; i++){\n    dice.push(new Die(6));\n    protoDice.push(new ProtoDie(6));\n}\n</code></pre>\n<p>Here we sim­ply have two ar­rays, one for clo­sure dice, and the other for pro­to­type dice. After that we have a loop to make 100 ob­jects in the ar­ray of the rel­a­tive types that use that afore­men­tioned meth­ods. Next, I tried test­ing the speed of ini­ti­atig the roll method on each of these ob­jects.</p>\n<pre><code class=\"lang-javascript\">//roll once for each instance in dice\n\nvar start = Date.now();\n\nfor(var i = 0; i &lt; 100; i++){\n    dice[i].roll;\n}\nvar end = Date.now();\n\nconsole.log(&quot;Rolling Without Prototyping: &quot; + (end - start) + &quot;ms&quot;);\n\nstart = Date.now();\n\nfor(var i = 0; i &lt; 100; i++){\n    protoDice[i].roll;\n}\nend = Date.now();\n\nconsole.log(&quot;Rolling With Prototyping: &quot; + (end - start) + &quot;ms&quot;);\n</code></pre>\n<p>Well, as it turns out, 100 ob­jects is not enough to get an idea of the speed dif­fer­ence be­tween these two. Modern com­put­ers are just too quick for a 100 ob­jects to cause any no­tice­able dif­fer­ence be­tween the two meth­ods as far as in­stan­ti­a­tion speed goes. But I ﬁg­ured I might as well up the ante a lit­tle and try and see if/​when there is a dif­fer­nce in speed. as it turns out, if you change those for loops to make 100,000 in­stances of each ob­ject, rather than 100, you do get a dif­fer­ence in in­stan­ti­a­tion speed.</p>\n<pre><code>Rolling Without Prototyping: 7ms\nRolling With Prototyping: 8ms\n</code></pre><p>The fact that it took 100,000 ob­jects for each method to see a no­tice­able dif­fer­ence means that the dif­fer­ence in speed be­tween these two meth­ods is less than neg­lige­able as far as I’m con­cerned. But what are some of the other dif­fer­ences be­tween these two ap­proaches to <span class=\"small-caps\">OOJS</span>.</p>\n<h2 id=\"the-good-results\">The Good Results</h2>\n<p>The other thing I wanted to test was mem­ory us­age. That seems to be the big dif­fer­ence. The fact that there ex­ists only one method us­ing the pro­to­type ap­proach, across all the in­stances of the spe­ciﬁc ob­ject, <span class=\"small-caps\">HAS</span> to mean a huge de­crease in mem­ory. And so, I tested it. At ﬁrst, I made the mis­take of test­ing for the size of the ob­jects in my script.The prob­lem with this is that these com­par­isons just take in to ac­count the size of the ob­jects con­struct meth­ods, which are the same in both cases. I mis­tak­ingly used the script from the <a href=\"http://stackoverflow.com/questions/1248302/javascript-object-size\">StackOverﬂow an­swer here</a>.\nSo in­stead, I dove into Chrome’s Dev tool, took a heap snap­shot, and looked for the dif­fer­ence be­tween these two types of ob­jects. At last, I found the con­clu­sive dif­fer­ence I had been search­ing for.</p>\n<pre><code>Closure:     5600 bytes\nPrototype:     1600 bytes\n</code></pre><p>That is a se­ri­ous in­crease in mem­ory us­age be­tween clo­sures and pro­to­types. Satisﬁed with ﬁnd­ing my an­swer, I de­cided to do a bit more re­search to see what oth­ers came up with. I found this <a href=\"https://github.com/podefr/benchmarks/blob/master/proto-vs-closure-memory/closure.js\">com­pre­hen­sive bench­mark here</a>, show­ing that the dif­fer­ent in mem­ory us­age be­tween pro­to­types and clo­sures in­creases dra­mat­i­cally with more meth­ods on the ob­jects. Finding out this size dif­fer­ence was an awe­some way to un­der­stand more of how pro­to­types work.</p>\n",
		"meta": {
			"creationDate": "2017-12-08T23:03:23.599Z",
			"lastEdited": "2017-11-30T17:55:28.552Z",
			"title": "A Look into The Speed of Prototypes vs. Closures",
			"tags": [
				"javascript",
				"functional programming"
			]
		}
	},
	"setting_up_sass": {
		"content": "<h1 id=\"how-to-set-up-sass-for-your-workflow\">How to Set Up Sass for Your Workﬂow</h1>\n<p>Today I’m go­ing to be teach­ing you how to set up Sass in your web de­vel­op­ment work­ﬂow. Sass is an in­cred­i­bly pow­er­ful lan­guage for pre­pro­cess­ing web­sites, and I use it in pretty much every pro­ject I work on. But while Sass is fairly straight­for­ward and easy to use, set­ting it up can be a bit of a pain. When I ﬁrst tried get­ting Sass into my work ﬂow, I re­mem­ber I had tons of ques­tions, and was­n’t re­ally sure where to start. I hope in this video I can an­swer a lot of the ques­tions you have about set­ting up Sass for your work­ﬂow, so that by the end, you’ll have it ready to go for your next pro­ject.</p>\n<h2 id=\"so-what-exactly-is-sass-\">So What Exactly is Sass?</h2>\n<p>Sass is a <span class=\"small-caps\">CSS</span> Preprocessor. What that means is that you write Sass into your text ed­i­tor of choice, and then run com­pi­la­tion on that Sass, and like a but­ter­ﬂy turn­ing back into a cater­pil­lar, you will get a <span class=\"small-caps\">CSS</span> ﬁle. See while Sass is amaz­ing, it is­n’t read­able by any mod­ern web browsers. So you need to out­put the Sass you write to <span class=\"small-caps\">CSS</span>, or else it’s pretty much un­us­able.</p>\n<p>Now when I ﬁrst started us­ing Sass, I needed to ﬁrst set up Ruby, the lan­guage that Sass was orig­i­nally writ­ten in, be­fore get­ting Sass up and run­ning. But that is not nec­es­sary any more, and hav­ing Ruby Sass is ac­tu­ally not ideal for our work­ﬂow. If we were to use Ruby sass for our com­pi­la­tion task, it would take a long time. I’m stat­ing that in terms of com­put­ers. You might not no­tice it at ﬁrst, but once you get large ﬁles and try to com­pile them with Ruby Sass, it can take sev­eral sec­onds to com­plete. That might not sound like a lot, but when it’s hap­pen­ing once every few min­utes, trust me, it adds up.</p>\n<p>So we are go­ing to be us­ing <a href=\"http://sass-lang.com/libsass\">lib­Sass</a>, which is Sass writ­ten in C++. The main dif­fer­ence be­tween nor­mal Sass and lib­Sass is that lib­Sass is a lot faster. And I mean a lot. <a href=\"https://www.solitr.com/blog/2014/01/css-preprocessor-benchmark/\">Benchmarks show com­pi­la­tion speeds to be about 25x faster with lib­Sass</a>. So that saves us time with in­stal­la­tion, and time with our com­pi­la­tion.</p>\n<p>In or­der for us to use Sass seam­lessly in our work­ﬂow, we’re go­ing to want to in­te­grate it with a task run­ner of some sort. The rea­son for that is while I could show you how to sim­ply com­pile Sass, that is­n’t re­ally set­ting it up. You aren’t go­ing to want to run a com­mand every time you want to com­pile your Sass, to see the re­sults. So in­stead, let’s set up a task in a task run­ner that will com­pile our Sass for us, and will com­pile again every time we save our ﬁle.</p>\n<h2 id=\"setting-up-our-taskrunner\">Setting Up Our Taskrunner</h2>\n<p>Now if you’ve never used a task run­ner, or npm, or node, or you’ve never even heard of such things, well this will be a crash course in all of those. You might be ask­ing your­self, why do I have to in­stall all of this other garbage just to write Sass. Trust me, this is the right way to go.</p>\n<p>The ﬁrst step we’re go­ing to want to do is in­stall Node. You’re go­ing to want to go to this link <a href=\"https://nodejs.org/en/\">here</a>, and fol­low the di­rec­tions to in­stall it. Now Node is ba­si­cally just javascript that does­n’t have to run in a web browser. It’s a great tool for web de­vel­op­ers, since web de­vel­op­ers al­ready know javascript for the most part. It also is the lan­guage used to run the largest pack­age dis­tri­b­u­tion net­work. <span class=\"small-caps\">NPM</span>.</p>\n<h2 id=\"what-s-npm\">What’s <span class=\"small-caps\">NPM</span></h2>\n<p><span class=\"small-caps\">NPM</span> stands for Node Package Manager, sort of. I re­mem­ber read­ing some­where that it does­n’t ac­tu­ally stand for that, kind of like how <span class=\"small-caps\">KFC</span> is just <span class=\"small-caps\">KFC</span>, but most peo­ple will re­fer to it as that, or just npm. Now <span class=\"small-caps\">NPM</span> comes pre­bun­dled with Node, so you don’t have to go out and get it any­where.</p>\n<p><span class=\"small-caps\">PM</span> let’s de­vel­op­ers share pro­jects, called pack­ages, so that other de­vel­op­ers can use them fop their pro­jects. It is also what my task run­ner of choice, and the soft­ware we are go­ing to use to get Sass up and run­ning, runs on.</p>\n<p>Grunt is an awe­some tool for web de­vel­op­ers. It is the back­bone of your work­ﬂow. It let’s you cre­ate and ex­e­cute<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>tasks”, which are ba­si­cally jobs that you want done au­to­mat­i­cally, so that you don’t have to think about them.</p>\n<p>We need to use <span class=\"small-caps\">NPM</span> to in­stall grunt, along with sass. We’re go­ing to need to jump into our com­mand line ap­pli­ca­tion to get this run­ning. If you’ve never used a com­mand line tool be­fore, don’t worry, it won’t bite. It’s some­thing you should learn how to use even­tu­ally. and this is as good a time as any to get started.</p>\n<h2 id=\"working-in-the-command-prompt\">Working in the Command Prompt</h2>\n<p>If you’re on win­dows, open com­mand prompt, open ter­mi­nal. For win­dows, all you have to do is go to your start screen or tab, and type in com­mand prompt. click it and you should see this black box pop up.</p>\n<p>On mac, ter­mi­nal can be found un­der ap­pli­ca­tions, and then util­i­ties. Click it to open it and you should see some­thing sim­i­lar to win­dows.</p>\n<p>Now we’re go­ing to want to set up a folder for our pro­ject we’re go­ing to use Sass on. If you’re com­mand line does­n’t say that you’re on the desk­top, then nav­i­gate to it by typ­ing cd, and the ad­dress of your desk­top. To get this, you can go to ei­ther ex­plorer or ﬁnder, and copy it from the ad­dress bar at the top. We can make this folder pretty much any­where, but since it’s your ﬁrst time, do­ing it on the desk­top will just let you ac­cess and see your work more eas­ily. But feel free to make your folder else­where. To make your folder, type</p>\n<pre><code>mkdir {the name of the directory your want to create}\n</code></pre><p>then type</p>\n<pre><code>cd {name of the directory you created}\n</code></pre><p>This is where we are go­ing to set up our pro­ject. To set up an <span class=\"small-caps\">NPM</span> pro­ject, type</p>\n<pre><code>npm init\n</code></pre><p>You’ll get a bunch of prompts here for your pro­ject name, and a lot of other stuff. feel free to ﬁll these out as you please, but a lot of it is­n’t nec­es­sary. You’d want to make this as ro­bust as pos­si­ble for a pro­duc­tion level pro­ject, but for now, it’s ﬁne.</p>\n<p>Now we’re go­ing to open that folder in our text ed­i­tor to see what we just did. If you drag your folder to your text ed­i­tor, in this case I’m us­ing sub­lime text 2, you’ll see a ﬁle called pack­age.json. This is where all of the in­for­ma­tion on your pro­ject is go­ing to be, in­clud­ing the de­pen­den­cies needed for this pro­ject. This is where we are go­ing to de­clare our de­pen­dency for grunt and Sass. but we don’t have to type it out here, there’s an eas­ier way to do it. Let’s go back to our com­mand line and start in­stalling our de­pen­den­cies. The ﬁrst thing we’re go­ing to want to in­stall is grunt. It’s re­ally easy to in­stall. Type</p>\n<pre><code>npm install grunt --save-dev\n</code></pre><p>to in­stall. All that com­mand is do­ing is telling npm, to in­stall, a pack­age, in this case grunt, and save it as a de­vel­op­ment de­pen­dency. You can also do just –save in­stead, but that will save it as a nor­mal de­pen­dency, and since grunt is some­thing we will be us­ing in our de­vel­op­ment work­ﬂow, rather than our pro­duc­tion level de­ploy­ment, it’s bet­ter to leave it as a de­vDe­pen­dency.</p>\n<p>So you’ll see a lot of stuff come up. As long as stuff does­n’t look hor­ri­ble and red, it means that it worked ok. If you got some sort of er­ror mes­sage, make sure you in­stalled node prop­erly in the last step.</p>\n<h2 id=\"downloading-sass\">Downloading Sass</h2>\n<p>Now we’re go­ing to down­load Sass. Finally right? In your com­mand prompt, type</p>\n<pre><code>npm install grunt-sass --save-dev\n</code></pre><p>Now you’re prob­a­bly think­ing, grunt sass? I thought we were just go­ing to be us­ing nor­mal sass, and then you men­tioned lib­Sass. Well grunt sass is a wrap­per around lib­Sass that we’ll use in our grunt tasks. We’re go­ing to want to in­stall one last de­pen­dency for our Sass com­pi­la­tion wor­ﬂow, and that’s watch. Watch will let grunt au­to­mat­i­cally do our tasks when we save our ﬁles, so that we can just have it run in the back­ground while we work. To in­stall watch, type</p>\n<pre><code>npm install grunt-contrib-watch --save-dev\n</code></pre><p>If you go back to your text ed­i­tor, and look at that pack­age.json ﬁle, you’ll no­tice that it has those dev de­pen­den­cies writ­ten out, along with the ver­sion num­ber of the soft­ware you just down­loaded. Because of this, you won’t have to do the steps we just did when you want to make a new pro­ject. Instead, you can just take this pack­age.json ﬁle, bring it to a new pro­ject, edit the in­for­ma­tion about the pro­ject, and sim­ply type</p>\n<pre><code>npm install\n</code></pre><p>in the com­mand prompt. in the com­mand prompt. The stuff we just down­loaded will then au­to­mat­i­cally be added to the new pro­ject. Now we’re go­ing to want to con­ﬁg­ure grunt for our work­ﬂow. Grunt needs to be told what to do via a javascript ﬁle called grunt­ﬁle.js. Below is the ﬁle that you would use for what we want to do</p>\n<pre><code>//Gruntfile.js\n</code></pre><h2 id=\"last-steps\">Last Steps</h2>\n<p>Now we have just one last step be­fore Sass is fully func­tional in our pro­ject. Back in the com­mand line, we’re go­ing to want to in­stall the grunt com­mand line in­ter­face, or <span class=\"small-caps\">CLI</span>, or cli, so that we can just run grunt and for­get about it. to do this type</p>\n<pre><code>npm install grunt-cli -g\n</code></pre><p>The -g means it will be in­stalled glob­ally on your ma­chine. If you’d pre­fer, you can also just in­stall it on your pro­ject, and save it with –save-dev in­stead of -g, but if you are go­ing to be us­ing grunt a lot in the fu­ture, it may be ben­e­ﬁ­cial to have it in­stalled glob­ally, to save you a step in the fu­ture.</p>\n<p>And that is that. Grunt and sass are now ready to go on our pro­jects. Simply type grunt into your com­mand line, and your task run­ner will start work­ing. Let’s test it out with writ­ing some Sass.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Alright guys I hope this was in­for­ma­tive and gives you started with Sass in your work­ﬂow. Lot’s of de­vel­op­ers have sim­i­lar set ups to this for writ­ing styles for web sites. Some peo­ple pre­fer a dif­fer­ent task run­ner called Gulp, but it is very sim­i­lar to grunt.</p>\n<p>Until next time!</p>\n",
		"meta": {
			"creationDate": "2017-12-08T23:03:23.592Z",
			"lastEdited": "2017-12-07T22:07:39.070Z",
			"title": "How to Set Up Sass for Your Workflow",
			"tags": [
				"professional development",
				"sass",
				"web development",
				"front end development"
			]
		}
	},
	"the_thoughts_behind_its_a_blog": {
		"content": "<h1 id=\"the-thoughts-behind-itsablog\">The Thoughts Behind ItsABlog</h1>\n<p>I’ve al­ways loved the idea of hav­ing a blog. If you’re a de­vel­oper like me, you prob­a­bly spend a good por­tion of your day read­ing other peo­ple’s thoughts, opin­ions, ar­ti­cles, and code snip­pets on blogs all over the web. The rea­son I got into writ­ing code in the ﬁrst place was try­ing to do what some­one else could do.<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Look at this guy, he made a cool nav­i­ga­tion menu”.<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Hey, this guy built out his own node server”. Building things and com­par­ing your work to that of oth­ers is some­thing that is just go­ing to hap­pen in life, and es­pe­cially in this in­dus­try. I love this. It makes me want to do more stuff. Often, it makes me learn that I want to do things that I had no idea about un­til I saw some­one else do it.</p>\n<p>The same is true for a blog. If step one of learn­ing pro­gram­ming is learn­ing to write code by read­ing what other peo­ple wrote, prob­a­bly one of the more in­ter­me­di­ate steps is ac­tu­ally writ­ing those ideas your­self. It’s an ap­peal­ing thought right? Having got­ten through the gaunt­let of learn­ing what ex­actly a <span class=\"small-caps\">CSS</span> pre­proces­sor is, or how to set up an <span class=\"small-caps\">SSL</span> cert on a new server, or what­ever col­lec­tion of giz­mos and gad­gets you cur­rently have on your ma­chine to build cool things, you now want to be­stow onto oth­ers what you have learned, just as you had when you were in their less ex­pe­ri­enced shoes. Here’s the prob­lem though: <em>set­ting up a blog sucks</em>.</p>\n<p>So every per­son that has ever tried to start up some sort of reg­u­lar writ­ing ex­pe­ri­ence, whether it’s a book, a blog, a se­ries of es­says, what­ever, they will most likely talk about how stick­ing to it can be a chore some times. Writer’s block is some­thing that is com­mon par­lance. So is just be­ing lazy. The act of get­ting your thoughts out there is al­ready a chal­leng­ing one, and will made even more so if you have to ﬁght your tools along the way. I live every day in­side of a code ed­i­tor. I’m used to deal­ing with text. I’m used to hav­ing that text do mag­i­cal things for me, and have some­thing pop out that’s per­fect and func­tional (bugs never hap­pen, shhh). So when I’ve tried to set up blogs in the past, I’ve al­ways got­ten an­noyed at this step:<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Great! I just set up my own site, and now I can add a blog… by set­ting up word­press. Crap, should this be it’s own sub­do­main? It is <span class=\"small-caps\">PHP</span> af­ter all. Hmm… but I want to show the ti­tle of this ar­ti­cle on my home page”. Inspiration to write some­thing cool quickly turns into go­ing through an ex­er­cise in a tech stack that you’re less fa­mil­iar with, or try­ing to think through how this should be set up.</p>\n<p>As I’ve started to work more, I’ve re­ally come to adopt the strat­egy of get­ting as few things as pos­si­ble in the way of me do­ing what I like. I want to do lots of things, quickly, and pretty well, and have them be im­proved later if they need to be im­proved. Having a B+ side pro­ject now is of­ten bet­ter than an A pro­ject in 8 weeks. On top of that, I want to be re­minded of things that I should be do­ing. A com­mon tip gui­tarists give for learn­ing to play gui­tar, is to never put your gui­tar in a case when you’re home. Get a stand, put it in the mid­dle of your liv­ing room. Have it star­ing at you as you walk by. You’ll feel guilty when you don’t pick it up every now and then. If I have a pro­ject called<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>blog” star­ing at me within my code­base, I’ll def­i­nitely no­tice it.</p>\n<p>All this think­ing made me want to make some­thing to make my dumb idea of writ­ing dumb ideas eas­ier for me. ItsABlog is built for the de­vel­op­ers who just want to add some blog posts to their site. I don’t need a data­base. I don’t need user ac­counts. I don’t need all the stuff that a nor­mal <span class=\"small-caps\">CMS</span> comes with. I just need text. I just <em>want</em> text. I live in text, as I’m guess­ing a lot of you do too. I want to write text. I want that to be­come a page on a web­site. I don’t want to have to think much about it. I want it to be source con­trolled like every­thing else I do in my wak­ing life. I want <span class=\"small-caps\">JSON</span>, I know how to deal with that. Sure, maybe there’s a few cool fea­tures I’d want to have here or there, tag­ging cer­tain posts, show­ing when a post was writ­ten. If you agree with any of this, go ahead and take a look at the pro­ject on GitHub. Hopefully it can get your ideas out there a lit­tle bit eas­ier.</p>\n",
		"meta": {
			"creationDate": "2017-12-08T23:03:23.619Z",
			"lastEdited": "2017-11-27T22:13:07.684Z",
			"tags": [
				"writing",
				"blog",
				"javascript",
				"itsablog"
			],
			"title": "The Thoughts Behind ItsABlog"
		}
	},
	"what_is_good_enough_to_get_out_the_door": {
		"content": "<h1 id=\"what-is-good-enough-to-get-out-the-door-\">What is Good Enough to Get Out The Door?</h1>\n<p>You’ve heard the mantra.<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Give a hun­dred and ten per­cent to­day”. It’s com­mon on foot­ball ﬁelds, or in sales meet­ings. But what ex­actly does it mean? I think some peo­ple take it to lit­er­ally mean I need to do more than I’ve ever done to­day, which is prob­a­bly the most in­no­cent take on the mean­ing. Others will take it to mean I want ex­actly 10% more than you are pos­si­bly able of do­ing. What ex­actly does 10% of ef­fort mean? It’s some­thing that is­n’t em­pir­i­cal. I can’t ex­actly put ef­fort in a test tube. And not only are we just as­sign­ing value to an ab­stract con­cept, we’re say­ing that what­ever that value is, it needs to be more than what’s pos­si­ble.</p>\n<p>I get why peo­ple say it, it’s to in­spire peo­ple to do their best, which is of­ten more than what they thought was their best. But in­spi­ra­tional id­ioms do not make a great prod­uct. Let me pro­pose my sys­tem of get­ting things done. I shoot for 80 per­cent, I’ll of­ten set­tle for 70. Of what, you might ask. Feature value from de­vel­op­ment. I know I know, I just said that it’s an­noy­ing to have to hear an em­pir­i­cal value as­signed to some­thing in­tan­gi­ble, but just like with the above<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>stick-to-itiveness”-esque say­ing, it’s more of a con­cept than a mea­sure­ment. Let’s look at an ex­am­ple.</p>\n<p>Let’s say that your prod­uct owner says that the team should build out a new con­tact sec­tion for a page in your web app. The ini­tial pitch is to try and see how ef­fec­tive these forms are, and to in­crease con­tact rates over just hav­ing a link to an info email ad­dress. The idea is to build out a modal that will in­clude a con­tact form, and that will pre­vent scrolling while open, should be re­spon­sive, and should in­clude an over­lay that uses a blur ﬁl­ter to change any con­tent be­hind it. On its own, it’s not a su­per dif­ﬁ­cult fea­ture to im­ple­ment. There is prob­a­bly even a li­brary out there to do it. But in the world of pro­fes­sional de­vel­op­ment, es­pe­cially ag­ile, you of­ten won’t have just this one thing to worry about. You’ll have a stack of sto­ries that need to be com­pleted be­fore the next re­lease, and this is just one of many. I’d ar­gue that if the pur­pose is to have a way to im­prove con­tact in­for­ma­tion, maybe just build­ing out a sim­ple con­tact page, or sec­tion on pages that you want peo­ple to get in touch with you from. If it can an­swer the ques­tion as no, it’s not more ef­fec­tive, that might an­swer the ques­tion enough to know not to in­vest more work into this pro­ject, or it could say the op­po­site and have you work out the heav­ier fea­ture set at a later time.</p>\n<p>It’s quite com­mon how­ever, for de­vel­op­ers to not have a say in their pro­ject roadmap. They are told things that should be get­ting built, and their job is to ex­e­cute. But I would ar­gue that it is the duty of an ex­pert to voice opin­ion on a fea­ture set that he or she would be build­ing. It might be the case that who­ever is call­ing the shots just does­n’t know pos­si­ble al­ter­na­tives to so­lu­tions. I guar­an­tee that most prod­uct own­ers are look­ing for the best bang for their buck. And if their hired ex­pert tells them,<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Why do X, when we can do Y in half the time and get nearly all the re­sults” they might just lis­ten. Every work sit­u­a­tion is dif­fer­ent, but if you are in a healthy en­vi­ron­ment, al­ter­na­tive that save time and money should al­ways be pitched.</p>\n<p>This line of think­ing is not an ex­cuse to cut cor­ners. I’m sure many of you know ﬁrst hand the dis­as­ter­ous im­pli­ca­tions of not writ­ing unit tests, of cut­ting fea­tures for the sake of time, or pack­ing them in at the ex­pense of main­tain­abil­ity. The im­por­tant thing is to be con­sci­en­tious of the time spent get­ting things done, and think­ing of a big­ger pic­ture. It’s ac­tu­ally of­ten more in­ten­sive think­ing, be­cause plan­ning is much less of a list of todo’s, and in­stead a more meta-map of pos­si­ble things to get done, each one wor­thy of com­pro­mise. Just un­der­stand that as a de­vel­oper, your time is ex­pen­sive. Software costs money to get to pro­duc­tion, and giv­ing users, stake hold­ers, fu­ture code main­tain­ers the best value per hour is in­valu­able in this in­dus­try.</p>\n",
		"meta": {
			"creationDate": "2017-12-08T23:03:23.637Z",
			"lastEdited": "2017-12-05T19:39:24.068Z",
			"title": "What is Good Enough to Get Out The Door",
			"tags": [
				"professional development",
				"agile"
			]
		}
	},
	"zen_and_the_art_of_side_projects": {
		"content": "<h1 id=\"zen-and-the-art-of-side-projects\">Zen and the Art Of Side Projects</h1>\n<p>How many of you have been here be­fore? You just had a cool idea. You want to build this cool idea. You ﬁg­ured it could be some­thing fun to work on late at night, on sat­ur­day morn­ings. You want to take a breath at the end and go<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Ah, look at what I’ve done. Here’s my doo-hickie”. Or maybe you just learned a new tech­nol­ogy, and you’re dy­ing to try it out. You’re try­ing to ﬁnd an idea that could be good to have this new tech­nol­ogy made with. You also want to stand at the end with some ac­com­plish­ment, and say<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>well, here’s some­thing I did, and I learned a lot while do­ing this”. I think these are the two main rea­sons for side pro­jects: Wanting to build an idea, or want­ing to learn through build­ing.</p>\n<p>Building stuff is fun right? You’re a de­vel­oper, a pro­gram­mer, a web en­gi­neer. Your job is to make things. You’re a builder. And while build­ing and solv­ing tiny prob­lems is fun for you, hav­ing some­thing that you can show off is al­ways ap­peal­ing. Well, with the two sce­nar­ios above in mind, how many of your side pro­jects have ended in in­com­plete garbage, things that’s you’ve left by the way­side for months, un­ﬁn­ished, never to be touched again. You spent 20 hours set­ting up a build and every­thing, but now you’re just… done with it. For one rea­son or an­other. Sucks does­n’t it? Kind of feels like you did a ton of work, and yet at the end feel bad about it. Well, I’ve been there too. A lot. I’m pretty sure that I have a few Digital Ocean droplets out there right now that are just idly run­ning, with half ﬁn­ished code on them. I have a bunch of do­main names I’ve bought with the in­ten­tion of this<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>really be­ing the time I’m go­ing to ﬁn­ish some­thing”. And then it does­n’t hap­pen. And then I feel like crap.</p>\n<p>Anyway, here’s a list of ad­vice that I’ve learned, and I’ve started com­plet­ing way more pro­jects since keep­ing these things in mind</p>\n<h2 id=\"1-k-i-s-s-keep-it-scoped-stupid-\">1) K.I.S.S (Keep it Scoped, Stupid)</h2>\n<p>You have big dreams, big as­pi­ra­tions. I get it. You want to change the world. You prob­a­bly won’t to­day. Sorry to be the bearer of bad news. In fact, you prob­a­bly won’t to­mor­row ei­ther. This should­n’t get you down, it should be a bit of a re­lief. Because you don’t <span class=\"small-caps\">HAVE</span> to change the world to­day. Think about what you could get done in a day of straight work. If you’re like me, you have these bursts from time to time, where you work 20 hours de­vel­op­ing and get some­thing… well small. Workable, cool, but smaller than what you orig­i­nally hoped.</p>\n<p>You need to be con­ser­v­a­tive with your es­ti­ma­tion some­times, es­pe­cially with side pro­jects. They should at a bare min­i­mum be more en­joy­able than work. Ideally they should even be fun. But if your idea is go­ing to take 100 hours, and you re­al­ize how drained you feel af­ter a long day of work, and if you have plans this Saturday, you’ll start to get an­noyed at your­self for not tack­ling your idea (which if you were to be paid to com­plete would cost thou­sands of dol­lars).</p>\n<p>Instead, think about a small scope. What can you get done in a short amount of time. Write out the things that you could build to­day, if you went on an in­cred­i­ble tear. And then put a full stop at the end. It might not be the biggest or shini­est idea in the world, but it’ll be a start. An ex­am­ple of this could be like this. You want to build a new so­cial net­work. A Twitter clone or some­thing. There’s 500 things you need to do be­fore you’d call it<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>done”. Even if you did those 500 things, you might never even say it is done. But, to­day you could build a log in sys­tem, maybe even with a sim­ple server. Maybe just the back­end. Sweet, write down what it’ll take, do it, do it well, throw it in a repo, add tests to it, and some quick docs. You have com­pleted a pro­ject. You can use that later. Sure, you might still have your big idea in mind, but for now, you have some­thing to fall back on in case you change your mind and want to do an­other huge idea later.</p>\n<p>Wanting to do some­thing else ac­tu­ally goes into the next piece of ad­vice pretty well</p>\n<h2 id=\"2-the-biggest-blocker-you-re-going-to-face-is-your-own-boredom\">2) The biggest blocker you’re go­ing to face is your own bore­dom</h2>\n<p>You have other stuff to do. I get it. The dif­fer­ence be­tween work time and free time is that you get to choose what you <span class=\"small-caps\">WANT</span> to do in your free time. If that hap­pens to be your next big pro­ject, so be it. But as time goes on, you only get more likely to get bored of a pro­ject. Let me re­peat that, you’re go­ing to get bored. You could be the most am­bi­tious per­son on the planet, with an idea you’re in­cred­i­bly pas­sion­ate about. You’re still go­ing to get bored. And if you’re not mak­ing money from that thing that’s bor­ing you, you’re prob­a­bly just go­ing to stop do­ing it. What’s the best way to pre­vent this?</p>\n<p>Doing things quickly. If you’re in an in­spired mood to get things done, the best thing you can do is try to get as much done as pos­si­ble. Try and get all that you can done while you still have the de­sire to do so. I’m sure some of you out there are in­cred­i­bly dis­ci­plined work­ers. I’d like to con­sider my­self one as well. But when you’re cut­ting your own free time to do some­thing, you might want to be con­ser­v­a­tive with your stick-to-itive­ness. And I can say that I’ve got­ten much more pro­jects done by ded­i­cat­ing a small amount of time, and go­ing full force on it.</p>\n<h2 id=\"3-if-you-re-doing-something-for-the-first-time-it-probably-won-t-be-good\">3) If you’re do­ing some­thing for the ﬁrst time, it prob­a­bly won’t be good</h2>\n<p>The sec­ond sce­nario I laid out at the be­gin­ning of this ar­ti­cle men­tioned side pro­jects that are started for the pur­pose of learn­ing a new tech­nol­ogy. It seems like an ef­fec­tive use of time, learn­ing some new lan­guage, or tool, and hav­ing some­thing use­ful come out of it. Unfortunately, what of­ten ends up hap­pen­ing is you have some bet­ter un­der­stand­ing of what­ever it was you were try­ing to learn, enough to know that what you cre­ated sucks. It’s com­mon to feel bad about this, like your pro­ject was a fail­ure. Instead, think of it in the per­spec­tive of knowl­edge build­ing, rather than pro­ject build­ing. The main pur­pose of this pro­ject is to learn, not to have a us­able mod­ule come out of it. This is ob­vi­ously a mov­able scale, as it’s com­mon to use new ter­tiary tools. But just keep in mind that part of learn­ing some­thing new is fail­ing at it again and again. If you want to re­ally cre­ate some­thing that you would con­sider sta­ble, and us­able, try build­ing it out of tools you al­ready know. You’re much more likely to be sat­is­ﬁed by the end re­sult, even if you feel like you haven’t learned too much</p>\n<h2 id=\"4-if-you-re-a-beginner-you-re-going-to-make-a-lot-of-crap\">4) If you’re a be­gin­ner, you’re go­ing to make a lot of crap</h2>\n<p>This is kind of an ex­ten­sion of num­ber 3. When you’re ﬁrst start­ing out in the world of de­vel­op­ment, you’re go­ing to pretty much <span class=\"small-caps\">ONLY</span> have learn­ing pro­jects. You don’t know enough to even be­gin to es­ti­mate all of the above. That’s ok. Part of be­ing a be­gin­ner is mak­ing lots of crap, be­ing proud of the crap for a few days, be­fore re­al­iz­ing how poor it ac­tu­ally is. Programming has a high learn­ing curve, and this feel­ing is that of hik­ing up it. With lots of time and prac­tice, it does get bet­ter, but only if you stick to it. And you’re much more likely to stick to it if you’re pos­i­tive about the progress you’re mak­ing. Keep in mind how much you’ve been learn­ing, dif­fer­ent tools and li­braries, stacks and build processes. It can only help in fu­ture en­deav­ors.</p>\n<h2 id=\"5-don-t-tell-people-you-re-going-to-work-on-something\">5) Don’t tell peo­ple you’re go­ing to work on some­thing</h2>\n<p>If you are in a more so­cial de­vel­op­ment com­mu­nity, on­line or oth­er­wise, it might be tempt­ing to tell peo­ple about the cool new idea you have. Or that you’re in the mid­dle of a cool pro­ject. You want to share your ex­pe­ri­ences. Don’t. This is­n’t for any<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>they should­n’t know your idea be­cause it’s go­ing to change the world” rea­son. It’s more to avoid opin­ions be­ing made about you. You’re likely to start way more pro­jects than ﬁn­ish, and this is nor­mal. But if you talk to peo­ple about every sin­gle one, they’re not go­ing to care when you’re talk­ing to them for the 9th time about the<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>cool thing you’re work­ing on”, and they’re also go­ing to see your pro­jects as some­thing akin to<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>get rich quick schemes” or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>pie in the sky” dreams. Things you talk about but never ac­tu­ally get done. Even if you get half of all the pro­jects you talk about done, would that be some­thing you’d want to talk about reg­u­larly? This is ob­vi­ously a much more neb­u­lous rule than the oth­ers, and can vary de­pend­ing on who you talk to, but it’s gen­er­ally a good idea to just not brag, and if you are go­ing to brag, at least brag over some­thing that you’d con­sider com­plete.</p>\n<h2 id=\"to-finish\">To ﬁn­ish</h2>\n<p>This ended up be­ing a bit more ranty than I would have ex­pected, but I think the im­por­tant thing that I’ve learned over the years is that the abil­ity to ﬁn­ish a pro­ject is a skill, just like any­thing else in this in­dus­try and in life. And just like every­thing else, it takes time and prac­tice to get it down well, and even then you’ll have slip ups. You’re go­ing to make crap. Good! Go make crap. You <span class=\"small-caps\">CAN</span> get a cool mod­ule done in a day. It might suck, who cares? No one is giv­ing you dead­lines for your side pro­jects. If they are, by de­f­i­n­i­tion it should­n’t be a side pro­ject. Just go build some­thing to­day</p>\n",
		"meta": {
			"creationDate": "2017-12-08T23:03:23.625Z",
			"lastEdited": "2017-11-30T17:39:41.604Z",
			"tags": [
				"professional development",
				"side project"
			],
			"title": "Zen and the Art Of Side Projects"
		}
	}
}